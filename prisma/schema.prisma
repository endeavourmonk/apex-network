// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique @db.VarChar(320)
  email      String     @unique @db.VarChar(320)
  name       String
  gender     Gender     @default(Male)
  about      String     @default("N/A") @db.VarChar(500)
  skills     String     @default("None")
  photoUrl   String     @default("https://res.cloudinary.com/cloudimagestore-/image/upload/f_auto,q_auto/v1/Assets/icdn8f70m5fw7kyljdha")
  userType   UserType   @default(Developer)
  userStatus UserStatus @default(Active)
  userLevel  Int        @default(1)
  createdAt  DateTime   @default(now())
  openToWork Boolean    @default(false)

  posts       Post[]
  connections Connections[]

  jobs         Job[]
  applications Application[]

  requesterUser Connections[] @relation("RequesterToUsers")
  requesteeUser Connections[] @relation("RequesteeToUsers")

  Reactions Reaction[]
  Comments  Comment[]
}

enum Gender {
  Male
  Female
  Other
}

enum UserType {
  Developer
  Recruiter
  Admin
}

enum UserStatus {
  Active
  Inactive
}

model Post {
  id            Int      @id @default(autoincrement())
  postTitle     String
  isUpdated     Boolean  @default(false)
  updatedAt     DateTime @updatedAt
  postDate      DateTime @default(now())
  postContent   String
  postType      PostType @default(Post)
  photoURL      String?
  reactionCount Int      @default(0)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  Reactions Reaction[]
  Comments  Comment[]
}

enum PostType {
  Post
  Article
}

model Reaction {
  id        Int          @id @default(autoincrement())
  post      Post         @relation(fields: [postId], references: [id])
  postId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  reaction  ReactionType @default(Like)
  reactedAt DateTime     @default(now())
}

enum ReactionType {
  Like
  Dislike
  Insightful
  Support
  Celebrate
  Love
  Funny
  Sad
}

model Comment {
  id          Int      @id @default(autoincrement())
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  commentText String   @db.VarChar(5000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Connections {
  id               Int              @id @default(autoincrement())
  requester        Int
  requestee        Int
  connectionStatus ConnectionStatus
  requesterUser    User             @relation("RequesterToUsers", fields: [requester], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesteeUser    User             @relation("RequesteeToUsers", fields: [requestee], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users            User?            @relation(fields: [usersUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersUserId      Int?
  requestedTime    DateTime         @default(now())
}

enum ConnectionStatus {
  Pending
  Accepted
  Rejected
}

model Job {
  id             Int           @id @default(autoincrement())
  userId         Int
  jobTitle       String        @db.VarChar(100)
  jobDescription String
  jobDate        DateTime
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applications   Application[]
}

model Application {
  id                Int               @id @default(autoincrement())
  jobId             Int
  applicant         Int
  applicationStatus ApplicationStatus
  resumeUrl         String
  CvUrl             String
  job               Job               @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user              User              @relation(fields: [applicant], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum ApplicationStatus {
  Pending
  Accepted
  Rejected
}
