// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique @db.VarChar(50)
  name        String?
  UserType    UserType
  UserStatus  UserStatus
  UserLevel   Int           @default(1)
  CreatedAt   DateTime      @default(now())
  Posts       Post[]
  Connections Connections[]

  Jobs         Job[]
  Applications Application[]

  requesterUser Connections[] @relation("RequesterToUsers")
  requesteeUser Connections[] @relation("RequesteeToUsers")
}

enum UserType {
  Developer
  Recruiter
  Admin
}

enum UserStatus {
  Active
  Inactive
}

model Post {
  PostID      Int      @id @default(autoincrement())
  PostTitle   String
  isUpdated   Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  PostDate    DateTime @default(now())
  PostContent String
  PostType    PostType
  PhotoURL    String?

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

enum PostType {
  Post
}

model Connections {
  ConnectionID     Int              @id
  Requester        Int
  Requestee        Int
  ConnectionStatus ConnectionStatus
  requesterUser    User             @relation("RequesterToUsers", fields: [Requester], references: [id])
  requesteeUser    User             @relation("RequesteeToUsers", fields: [Requestee], references: [id])
  Users            User?            @relation(fields: [usersUserID], references: [id])
  usersUserID      Int?
  requestedTime    DateTime         @default(now())
}

enum ConnectionStatus {
  Pending
  Accepted
  Rejected
}

model Job {
  JobID          Int           @id @default(autoincrement())
  UserID         Int
  JobTitle       String        @db.VarChar(100)
  JobDescription String
  JobDate        DateTime
  user           User          @relation(fields: [UserID], references: [id])
  applications   Application[]
}

model Application {
  ApplicationID     Int               @id @default(autoincrement())
  JobID             Int
  Applicant         Int
  ApplicationStatus ApplicationStatus
  ResumeUrl         String
  CvUrl             String
  job               Job               @relation(fields: [JobID], references: [JobID])
  user              User              @relation(fields: [Applicant], references: [id])
}

enum ApplicationStatus {
  Pending
  Accepted
  Rejected
}
