// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique @db.VarChar(320)
  email      String     @unique @db.VarChar(320)
  name       String
  gender     Gender     @default(Male)
  about      String     @default("N/A") @db.VarChar(500)
  photoUrl   String     @default("https://res.cloudinary.com/cloudimagestore-/image/upload/f_auto,q_auto/v1/Assets/icdn8f70m5fw7kyljdha")
  userType   UserType   @default(Developer)
  userStatus UserStatus @default(Active)
  userLevel  Int        @default(1)
  createdAt  DateTime   @default(now())
  openToWork Boolean    @default(false)

  posts       Post[]
  connections Connections[]

  jobs         Job[]
  applications Application[]

  requesterUser Connections[] @relation("RequesterToUsers")
  requesteeUser Connections[] @relation("RequesteeToUsers")

  reactions Reaction[]
  comments  Comment[]

  userSkill UserSkill[]
}

enum Gender {
  Male
  Female
  Other
}

enum UserType {
  Developer
  Recruiter
  Admin
}

enum UserStatus {
  Active
  Inactive
}

model UserSkill {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  skill   Skill @relation(fields: [skillId], references: [id])
  skillId Int

  @@id([userId, skillId])
}

model Post {
  id            Int      @id @default(autoincrement())
  postTitle     String?
  isUpdated     Boolean  @default(false)
  updatedAt     DateTime @updatedAt
  postDate      DateTime @default(now())
  postContent   String?
  postType      PostType @default(Post)
  photoURL      String?
  reactionCount Int      @default(0)
  commentCount  Int      @default(0)

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId Int

  reactions Reaction[]
  comments  Comment[]
}

enum PostType {
  Post
  Article
}

model Reaction {
  id Int @id @default(autoincrement())

  postId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reaction  ReactionType @default(Like)
  reactedAt DateTime     @default(now())

  @@unique([postId, authorId])
  @@unique([commentId, authorId])
}

enum ReactionType {
  Like
  Insightful
  Support
  Celebrate
  Love
  Funny
  Sad
}

model Comment {
  id       Int  @id @default(autoincrement())
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId Int

  parentId      Int?
  parentComment Comment?  @relation("subComment", fields: [parentId], references: [id])
  children      Comment[] @relation("subComment")

  commentText   String     @db.VarChar(5000)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  reactionCount Int        @default(0)
  Reaction      Reaction[]
}

model Connections {
  id               Int              @id @default(autoincrement())
  requester        Int
  requestee        Int
  connectionStatus ConnectionStatus
  requesterUser    User             @relation("RequesterToUsers", fields: [requester], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesteeUser    User             @relation("RequesteeToUsers", fields: [requestee], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users            User?            @relation(fields: [usersUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersUserId      Int?
  requestedTime    DateTime         @default(now())
}

enum ConnectionStatus {
  Pending
  Accepted
  Rejected
}

model Skill {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  jobSkill  JobSkill[]
  userSkill UserSkill[]
}

model Job {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(100)
  description        String   @db.Text
  role               String   @db.VarChar(50)
  location           String   @db.VarChar(100)
  locationType       String   @db.VarChar(50)
  experienceRequired String   @db.VarChar(100)
  salaryRange        String   @db.VarChar(100)
  jobDate            DateTime

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId Int

  applications   Application[]
  skillsRequired JobSkill[]
}

model JobSkill {
  job     Job   @relation(fields: [jobId], references: [id])
  jobId   Int
  skill   Skill @relation(fields: [skillId], references: [id])
  skillId Int

  @@id([jobId, skillId])
}

model Application {
  id                Int               @id @default(autoincrement())
  jobId             Int
  applicant         Int
  applicationStatus ApplicationStatus
  resumeUrl         String
  CvUrl             String
  job               Job               @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user              User              @relation(fields: [applicant], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum ApplicationStatus {
  Pending
  Accepted
  Rejected
}
